#!/usr/bin/env bash

set -eo pipefail

# Create the python layer directory if it doesn't exist
PYTHON_LAYER="$CNB_LAYERS_DIR/python"
mkdir -p $PYTHON_LAYER

# fetch function name from env
if [ -z "$FUNCTION_NAME" ]; then
  echo "ERROR: missing FUNCTION_NAME env var"
  exit 1
fi

# Install the Python dependencies into
python3 -m venv "$PYTHON_LAYER"/venv
source "$PYTHON_LAYER"/venv/bin/activate
pip3 install -r requirements.txt

# Set layer metadata
echo -e "[types]\nlaunch = true" > "$PYTHON_LAYER.toml"

# Copy the function_context.py file to the app directory
echo -e "from dapr.ext.grpc import App, InvokeMethodRequest, InvokeMethodResponse
from dapr.clients import DaprClient


class FunctionContext():
    def __init__(self, name, port) -> None:
        self.name = name
        self.port = port
        self.dapr_client = DaprClient
        self.app = App()
        self.user_function = None
        self.request = None

    def load_user_function(self, user_function):
        self.user_function = user_function

    def invoke_user_function(self, request):
        self.request = request
        if self.user_function:
            output_data = self.user_function(self)
            return output_data
        else:
            raise ValueError(\"User function is not loaded.\")

    def run(self):
        @self.app.method(name=self.name)
        def function_method(request: InvokeMethodRequest) -> InvokeMethodResponse:
            output_data = self.invoke_user_function(request)
            return InvokeMethodResponse(output_data.encode(), \"text/plain; charset=UTF-8\")

        self.app.run(self.port)" > function_framework.py

# Create the user function with the function name
echo -e "\n\nif __name__ == '__main__':
    fc = FunctionContext(\"$FUNCTION_NAME\", 50051)
    fc.load_user_function(user_function)
    fc.run()" >> app.py

# Write the launch.toml file
cat > "$CNB_LAYERS_DIR/launch.toml" << EOL
# our web process
[[processes]]
type = "web"
command = "source $PYTHON_LAYER/venv/bin/activate && python app.py"
default = true

# our worker process
[[processes]]
type = "worker"
command = "bundle exec ruby worker.rb"
EOL
